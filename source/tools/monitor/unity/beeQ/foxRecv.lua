---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/26 3:57 PM
---

require("common.class")

local CfoxTSDB = require("tsdb.foxTSDB")
local system = require("common.system")
local CfoxRecv = class("CfoxRecv")
local unistd = require("posix.unistd")
local fcntl = require("posix.fcntl")
local bit = require("bit")
local struct = require("struct")

local function setupCo(fYaml)
    local res = system:parseYaml(fYaml)
    if res.pushTo then
        local fdIn, fdOut = unistd.pipe()
        if not fdIn then
            print("setup pipe failed.")
            os.exit(1)
        end

        fcntl.fcntl(fdIn, 1031, 1024 * 1024)
        fcntl.fcntl(fdOut, 1031, 1024 * 1024)

        local flag = fcntl.fcntl(fdOut, fcntl.F_GETFL, 0);
        flag = bit.bor(flag, fcntl.O_NONBLOCK)

        lua_push_start(fdIn)
        return fdIn, fdOut
    end
    return nil
end

function CfoxRecv:_init_(fYaml)
    self._fox = CfoxTSDB.new(fYaml)
    self._fox:setupWrite()
    self.fdIn, self.fdOut = setupCo(fYaml)

    if self.fdIn then
        self._outFunc = function(stream) self:outToFd(stream)  end
    else
        self._outFunc = function(stream) self._fox:write(stream)  end
    end
end

function CfoxRecv:_del_()
    if self.fdIn then
        lua_push_stop();
        unistd.close(self.fdIn)
        unistd.close(self.fdOut)
    end
end

local function pipeOut(fd, stream)
    local len = #stream
    local s = struct.pack("<i", len)
    local ret = unistd.write(fd, s)
    if ret > 0 then
        unistd.write(fd, stream)
    end
end

function CfoxRecv:outToFd(stream)
    pipeOut(self.fdOut, stream)
    self._fox:write(stream)
end

function CfoxRecv:write(stream)
    self._outFunc(stream)
end

return CfoxRecv
