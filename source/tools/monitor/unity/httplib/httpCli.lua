---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/19 4:40 PM
---

require("common.class")
local system = require("common.system")
local ChttpComm = require("httplib.httpComm")
local ChttpCli = class("httpCli", ChttpComm)

function ChttpCli:_init_(proxy)
    ChttpComm._init_(self)
    self._proxy = proxy
    self._http = require("socket.http")
    self._ltn12 = require("ltn12")
end

function ChttpCli:get(Url)
    local t = {}
    local res, code, head= self._http.request{
        url=Url,
        proxy = self._proxy,
        sink = self._ltn12.sink.table(t)
    }
    local body = table.concat(t)
    return {
        res = res,
        code = code,
        head = head,
        body = body
    }
end

function ChttpCli:put(Url, stream, header)
    local headers = header or { Connection = 'close' }
    local source = self._ltn12.source.string(stream)
    local t = {}
    local res, code, head = self._http.request{
        url = Url,
        method = "PUT",
        headers = headers,
        source = source,
        proxy = self._proxy,
        sink = self._ltn12.sink.table(t)
    }
    local body = table.concat(t)
    return {
        res = res,
        code = code,
        head = head,
        body = body
    }
end

function ChttpCli:post(Url, reqs, header)
    local headers = header or { Connection = 'close' }
    local source = self._ltn12.source.string(reqs)
    local t = {}
    local res, code, head = self._http.request{
        url = Url,
        method = "POST",
        headers = headers,
        source = source,
        proxy = self._proxy,
        sink = self._ltn12.sink.table(t)
    }
    local body = table.concat(t)
    return {
        res = res,
        code = code,
        head = head,
        body = body
    }
end

function ChttpCli:postTable(Url, t)
    local req = self:jencode(t)
    local headers = {
        ["Content-Type"] = "application/json",
        ["Content-Length"] = #req,
    }
    return self:post(Url, req, headers)
end

function ChttpCli:postLine(Url, line)
    local headers = {
        ["Content-Type"] = "text/plain",
        ["Content-Length"] = #line,
    }
    return self:post(Url, line, headers)
end

local function addContent(content, c, line)
    content[c] = line
    return c + 1
end

function ChttpCli:postFormData(Url, fData)
    local headers = {
       ["accept"] = "application/json",
       ["Content-Type"] = "multipart/form-data"
    }

    local boundary = "----" .. system:randomStr(32)
    local c = 1
    local content = {}
    for k, v in pairs(fData) do
        c = addContent(content, c, boundary)   -- add boundary
        if type(v) == "table" then -- file: name, stream, type
            c = addContent(content, c, string.format('Content-Disposition: form-data; name="%s"; filename="%s"', k, v[1]))
            c = addContent(content, c, string.format('Content-Type: %s', v[3]))
            c = addContent(content, c, "")
            c = addContent(content, c, v[2])
        else
            c = addContent(content, c, string.format('content-disposition: form-data; name="%s"', k))
            c = addContent(content, c, "")
            c = addContent(content, c, v)
        end
    end
    addContent(content, c, boundary .. "--")
    local s = table.concat(content, "\n")
    headers["Content-type"] = string.format("multipart/form-data; boundary=%s", boundary)
    headers["Content-Length"] = #s
    return self:post(Url, s, headers)
end

return ChttpCli
