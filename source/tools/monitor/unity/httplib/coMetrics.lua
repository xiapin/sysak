---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wrp.
--- DateTime: 2023/7/7 17:07
---

require("common.class")

local CcoHttpCli = require("httplib.coHttpCli")
local system = require("common.system")
local pystring = require("common.pystring")
local lineParse = require("common.lineParse")
local CtransPro = require("common.transPro")
local base64 = require("base64")


local CcoMetrics = class("coMetrics", CcoHttpCli)

function CcoMetrics:_init_(fYaml)

    local res = system:parseYaml(fYaml)
    local _metrics = res.metrics
    self._mhead = _metrics.head
    self._title = _metrics.title

    self._transPro = CtransPro.new(self._instance, fYaml, false, false)

    local sysconf = system:parseYaml("/etc/sysak/mySLS.yaml")

    self._ak = sysconf.config.ak
    self._sk = sysconf.config.sk
    self._project = sysconf.config.project
    self._endpoint = sysconf.config.endpoint
    self._metricstore = sysconf.config.metricstore
    self._url = "/prometheus/" ..self._project.."/"..self._metricstore.."/api/v1/write"
    self._host = self._project .."." .. self._endpoint

    local pushMetrics = {
        host = self._host,
        url = self._url,
        port = 80
    }
    CcoHttpCli._init_(self, pushMetrics)
    -- go ffi
    local ffi = require("sls_metric.native.ffi_lua")
    self.ffi = ffi.ffi
    self.awesome = ffi.awesome

    --fox ffi
    local foxFFI = require("tsdb.native.foxffi")
    self.foxffi = foxFFI.ffi
    self.foxcffi = foxFFI.cffi
end

function CcoMetrics:echo(tReq)
    --if tReq.code ~= "204" then
    print(tReq.code, tReq.data)
    --end
end

function CcoMetrics:trans(msgs)
    local res
    local c = 0
    local lines

    lines = msgs.lines
    res = self._transPro:export(lines)
    local prome = self.ffi.new("GoString")
    prome.p = res
    prome.n = #res
    local prome_ptr = self.ffi.cast("GoString*", prome)
    local byte = self.ffi.new("GoSlice")
    local byte_ptr = self.ffi.cast("GoSlice*", byte) --{ void *data; GoInt len; GoInt cap; } GoSlice
    local data_len = self.awesome.metricSnappy(prome,byte_ptr)
    data_len = tonumber(data_len)
    local data = self.ffi.cast("GoUint8*", byte_ptr.data)
    --local stream = ""
    --for i = 0, data_len do
    --    --print(data[i])
    --
    --    stream = stream .. string.char(data[i])
    --end
    --
    --print(stream)
    --return stream

    return self.foxffi.string(data, data_len)
    --return "sysak_proc_cpu_total{mode=\"user\",instance=\"i-wz9d3tqjhpb8esj8ps4z\"} 0.8\nsysak_proc_cpu_total{mode=\"total\",instance=\"i-wz9d3tqjhpb8esj8ps4z\"} 3960.0\nsysak_proc_cpu_total{mode=\"user2\",instance=\"i-wz9d3tqjhpb8iesj8ps4z\"} 0.9\n"
end

function CcoMetrics:pack(body)
    local line = self:packCliHead('POST', self._url)
    local aksk = self._ak .. ":"..self._sk
    local aksk64 = base64.encode(aksk)
    print(aksk64)
    local head = {
        Host = self._host,
        ["Content-Encoding"] = "snappy",
        ["Content-Type"] = "application/x-protobuf",
        --["X-Prometheus-Remote-Write-Version"] = "0.1.0",
        ["Content-Length"] = #body,
        ["Authorization"] = "Basic " .. aksk64,
    }
    local heads = self:packCliHeaders(head)
    print("pack finish")
    return pystring:join("\r\n", {line, heads, body})
end

return CcoMetrics