---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wrp.
--- DateTime: 2023/7/7 17:07
---

require("common.class")

local CcoHttpCli = require("httplib.coHttpCli")
local system = require("common.system")
local pystring = require("common.pystring")
local lineParse = require("common.lineParse")
local CtransPro = require("common.transPro")



local CcoMetrics = class("coMetrics", CcoHttpCli)

function CcoMetrics:_init_(fYaml)
    CcoHttpCli._init_(self, fYaml)
    local res = system:parseYaml(fYaml)
    local _metrics = res.metrics
    self._mhead = _metrics.head
    self._title = _metrics.title

    self._transPro = CtransPro.new(self._instance, fYaml, false, false)

    -- go ffi
    local ffi = require("sls_metric.native.ffi_lua")
    self.ffi = ffi.ffi
    self.awesome = ffi.awesome
end

function CcoMetrics:echo(tReq)
    if tReq.code ~= "204" then
        print(tReq.code, tReq.data)
    end
end

function CcoMetrics:trans(msgs)
    local res
    local c = 0
    local lines
    local bodies = {}

    lines = msgs.lines
    res = self._transPro:export(lines)

    local prome = self.ffi.new("GoString")
    prome.p = res
    prome.n = #res
    local prome_ptr = self.ffi.cast("GoString*", prome)
    local byte = self.ffi.new("GoSlice")
    local byte_ptr = self.ffi.cast("GoSlice*", byte)
    local data_len = self.awesome.metricSnappy(prome,byte_ptr)
    data_len = tonumber(data_len)
    local data = self.ffi.cast("GoUint8*", byte_ptr.data)
    --for i = 0, data_len do
    --    print(data[i])
    --end

    return data
end

function CcoMetrics:pack(body) --在哪里调用的
    local line = self:packCliHead('POST', self._url)
    local head = {
        Host = self._host,
        ["Content-Encoding"] = "snappy",
        ["Content-Type"] = "application/x-protobuf",
        ["Content-Length"] = #body,
    }
    local heads = self:packCliHeaders(head)
    print("pack finish")
    return pystring:join("\r\n", {line, heads, body})
end

return CcoMetrics