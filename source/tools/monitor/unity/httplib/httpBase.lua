---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/24 9:52 AM
---

require("common.class")
local system = require("common.system")
local ChttpComm = require("httplib.httpComm")

local ChttpBase = class("ChttpBase", ChttpComm)

function ChttpBase:_init_(frame)
    ChttpComm._init_(self)
    self._urlCb = {}
end

function ChttpBase:_install(frame)
    for k, _ in pairs(self._urlCb) do
        frame:register(k, self)
    end
end

function ChttpBase:_installRe(path, frame)
    frame:registerRe(path, self)
end

function ChttpBase:echo(tRet, keep)
    error("ChttpBase:echo is a virtual function.")
end

local function checkKeep(tReq)
    local conn = tReq.header["connection"]
    if tReq.vers == "1.0" then
        if conn and string.lower(conn) == "keep-alive" then
            return true
        else   -- for http 1.0, close as default
            return false
        end
    else
        if conn and string.lower(conn) == "close" then
            return false
        else   -- for http 1.1 and newer, for keep-alive as default
            return true
        end
    end
end

function ChttpBase:call(tReq)
    local keep = checkKeep(tReq)
    local tRet = self._urlCb[tReq.path](tReq)
    local res = self:echo(tRet, keep)

    return res, keep
end

function ChttpBase:calls(tReq)
    local keep = checkKeep(tReq)
    local res = self:callRe(tReq, keep)

    return res, keep
end

return ChttpBase
