---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/11/22 12:15 AM
---

require("common.class")

local CcoHttpCliInst = require("httplib.coHttpCliInst")
local system = require("common.system")
local pystring = require("common.pystring")
local snappy = require("snappy")
local base64 = require("base64")
local pro_encode = require("pro_encode")
local sls_api = require("sls_api")
local CtransPro = require("common.transPro")

local CcoMetricstore = class("coMetricstore", CcoHttpCliInst)

local headers = {
    ["Content-Encoding"] = "snappy",
    ["Content-Type"] = "application/x-protobuf",
    ["X-Prometheus-Remote-Write-Version"] = "0.1.0",
}

function CcoMetricstore:_init_(fYaml, config, instance)

    local k1, k2 = sls_api.decode(config.addition)
    local s = base64.encode(k1 .. ":" .. k2)
    self._headers = system:deepcopy(headers)
    self._headers["Authorization"] = "Basic " .. s
    self._headers.Host = config.host

    self._transPro = CtransPro.new(instance, fYaml, false, false)

    local metricstore = {
        host = config.host,
        url = config.url,
        port = 80
    }

    CcoHttpCliInst._init_(self, instance, metricstore)
end

function CcoMetricstore:echo(tReq)
    if string.sub(tReq.code,1,1) ~= "2" then
        print(tReq.code, tReq.data)
    end
end

local function transLines(lines)
    if not lines then
        return {}
    end
    local res = {}
    local c = 1
    for _, line in ipairs(lines) do
        local cell = {title = line.line}
        local labels = {}
        if line.ls then
            for _, vlabel in ipairs(line.ls) do
                labels[vlabel.name] = vlabel.index
            end
        end
        cell.labels = labels

        local values = {}
        if line.vs then
            for _, vvalue in ipairs(line.vs) do
                values[vvalue.name] = vvalue.value
            end
        end
        cell.values = values
        res[c] = cell
        c = c + 1
    end
    return res
end

function CcoMetricstore:trans(msgs)
    local res
    local lines

    lines = transLines(msgs.lines)
    res = self._transPro:toMetric(lines)
    if res and #res > 0 then
        local encode = pro_encode.encode(res, os.time() * 1000)
        local compress = snappy.compress(encode)
        return compress
    else
        return nil
    end
end

function CcoMetricstore:pack(body)
    local line = self:packCliHead('POST', self._url)
    self._headers["Content-Length"] = #body
    local heads = self:packCliHeaders(self._headers)
    return pystring:join("\r\n", {line, heads, body})
end

return CcoMetricstore