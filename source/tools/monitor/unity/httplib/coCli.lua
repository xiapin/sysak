---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/4/3 17:46
---

require("common.class")
local socket = require("posix.sys.socket")
local CcoCli = class("coFrame")

function CcoCli:_init_(fd)
    self._bfd = fd
    self._efd = self:_installFFI()
end

function CcoCli:_del_()
    if self._efd then
        self.cffi.deinit(self._efd)
    end
end

function CcoCli:_installFFI()
    local ffi = require("beaver.native.beavercffi")

    self.ffi = ffi.ffi
    self.cffi = ffi.cffi

    local efd = self.cffi.init(self._bfd)
    assert(efd > 0)
    return efd
end

function CcoCli:_pollFd(bfd, ofd, nes, co)
    for i = 0, nes.num - 1 do
        local e = nes.evs[i];
        local fd = e.fd
        if fd == bfd then
            print("bfd worked.")
        elseif fd == ofd then
            coroutine.resume(co, e)
        else
            print("time out.")
            coroutine.resume(co, "hello.")
        end
    end
end

function CcoCli:_poll(cli)
    local bfd = self._bfd
    local efd = self._efd
    local ffi, cffi = self.ffi, self.cffi

    local co = coroutine.create(function(c, o, efd) cli.work(c, o, efd)  end)
    coroutine.resume(co, cli, cffi, efd)

    while true do
        local nes = ffi.new("native_events_t")
        local res = cffi.poll_fds(efd, 10, nes)

        if res < 0 then
            return "end poll."
        end
        if nes.num > 0 then
            self:_pollFd(bfd, cli.fd, nes, co)
        else
            print("time out.")
            coroutine.resume(co, "hello.")
        end
    end
end

function CcoCli:poll(cli)
    local _, msg = pcall(self._poll, self, cli)
    print(msg)

    return 0
end

return CcoCli
