---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/11/22 6:03 PM
---

require("common.class")
local sls_api = require("sls_api")
local enumStat = require("httplib.enumStat")
local pystring = require("common.pystring")
local lineParse = require("common.lineParse")

local CcoSls = class("CcoSls")

function CcoSls:_init_(fYaml, config, instance)
    self._sls = sls_api.new({config.endpoint, config.project, config.logstore, config.addition})
    self._instance = instance

    self.status = enumStat.closed
    self.fd = -1
end

function CcoSls:checkTime()
    return os.time() - self.online
end


function CcoSls:addInstance(line)   -- add instance id for line index.
    local cells = line.ls
    local hasInstance = false

    if cells then
        for _, cell in ipairs(cells) do
            if cell.name == "instance" then
                hasInstance = true
            end
        end
    end

    if not hasInstance then
        local cell = {
            name = "instance",
            index = self._instance
        }
        if cells then
            table.insert(cells, cell)
        else
            line.ls = {cell}
        end
    end
end

function CcoSls:transLine(line)
    return lineParse.packs(line)
end

function CcoSls:trans(msgs, body, filter)
    local res
    local c = 0
    local lines
    local ts = string.format(" %d000", os.time())   -- nano second
    local bodies = {}

    lines = msgs.lines
    for _, line in ipairs(lines) do
        self:addInstance(line)
        local log = self:transLine(line)
        if log then
            c = c + 1
            bodies[c] = log .. ts
        end
    end

    if #bodies then
        res = pystring:join("\n", bodies)
    end
    if body and #body > 0 then
        if res then
            return pystring:join("\n", {body, res})
        else
            return body
        end
    else
        return res
    end
end

function CcoSls:pack(body)
    return {
        instance = self._instance,
        log = body
    }
end

function CcoSls:work(cffi, efd)
    self.status = enumStat.connected

    self.online = os.time()
    while true do
        local body = coroutine.yield()
        local t = self:pack(body)
        self._sls:send(t)
    end
end

return CcoSls

