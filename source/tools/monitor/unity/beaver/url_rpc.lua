---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/29 10:17 PM
---
-- refer to https://www.cnblogs.com/cielosun/p/6762550.html
require("common.class")
local ChttpApp = require("httplib.httpApp")
local system = require("common.system")

local CurlRpc = class("urlRpc", ChttpApp)

function CurlRpc:_init_(frame)
    ChttpApp._init_(self)
    self:addMethods()
    self._urlCb["/rpc"] = function(tReq) return self:rpc(tReq)  end
    self:_install(frame)
end

function CurlRpc:addMethods()
    self._method = {
        sum = function(tJson) return self:sum(tJson) end
    }
end

function CurlRpc:sum(tJson)
    local sum = 0
    for _, v in ipairs(tJson.params) do
        if type(v) == "number" then
            sum = sum + v
        end
    end
    return {
        id = tJson.id,
        jsonrpc = "2.0",
        result = sum,
        error = nil,
    }
end

local function parseError()
    return {
        id = 0,
        jsonrpc = "2.0",
        error = {code = -32700, message = "parse error", data="null"},
    }
end

local function jsonError(id, msg)
    msg = msg or "json error"
    return {
        id = id,
        jsonrpc = "2.0",
        error = {code = -32600, message = msg, data="null"},
    }
end

local function methodError(id)
    return {
        id = id,
        jsonrpc = "2.0",
        error = {code = -32601, message = "not this method.", data="null"},
    }
end

local function checkMember(tJson)
    local heads = {"jsonrpc", "method", "params", "id"}

    for _, v in ipairs(heads) do
        if not system:keyIsIn(tJson, v) then
            return false
        end
    end
    return true
end

function CurlRpc:methodProc(tJson)
    local method = tJson.method
    if system:keyIsIn(self._method, method) then
        return self._method[method](tJson)
    else
        return methodError(tJson.id)
    end
end

function CurlRpc:check(tJson)
    if tJson then
        if system:keyIsIn(tJson, "id") then  -- check id is in.
            if checkMember(tJson) then
                if type(tJson.params) == "table" then
                    return self:methodProc(tJson)
                else
                    return jsonError(tJson.id, "bad param type.")
                end
            else
                return jsonError(tJson.id)
            end
        else
            return parseError()
        end
    else   --  服务端接收到无效的 JSON。该错误发送于服务器尝试解析 JSON 文本 32700
        return parseError()
    end
end

function CurlRpc:rpc(tReq)
    local stat, tJson = pcall(self.getJson, self, tReq)
    if stat then
        return self:check(tJson)
    else
        return parseError()
    end
end

return CurlRpc
