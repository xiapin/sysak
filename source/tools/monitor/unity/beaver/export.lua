---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/25 11:20 AM
---

local system = require("common.system")
local pystring = require("common.pystring")
local CfoxTSDB = require("tsdb.foxTSDB")
require("common.class")

local Cexport = class("Cexport")


local function qFormData(from, tData)
    local res = {}
    local len = #tData
    local last = 0
    local c = 0
    for i = len, 1, -1 do
        local line = tData[i]
        if from == line.title then
            if last == 0 or last == line.time then
                c = c + 1
                res[c] = line
                last = line.time
            else
                break
            end
        end
    end
    return res
end

local function packLine_us(title, ls, v, time)
    local tLs = {}
    for k, v in pairs(ls) do
        table.insert(tLs, string.format("%s=\"%s\"", k , v))
    end
    local label = ""
    if #tLs then
        label = pystring:join(",", tLs)
        label = "{" .. label .. "}"
    end
    return string.format("%s%s %.1f %d", title, label, v, time/1000)
end

local function packLine(title, ls, v)
    local tLs = {}
    local c = 0
    for k, v in pairs(ls) do
        c = c + 1
        tLs[c] = string.format("%s=\"%s\"", k , v)
    end
    local label = ""
    if #tLs then
        label = pystring:join(",", tLs)
        label = "{" .. label .. "}"
    end
    return string.format("%s%s %.1f", title, label, v)
end

function Cexport:_init_(instance, fYaml)
    self._instance = instance
    local ms = system:parseYaml(fYaml)
    self._freq = ms.config.freq
    self._timestamps = ms.config.real_timestamps
    if self._timestamps == true then
        self.pack_line = packLine_us
    else
        self.pack_line = packLine
    end
    self._tDescr = ms.metrics
    self._fox = CfoxTSDB.new(fYaml)
    self._fox:_setupRead()
end

function Cexport:export()
    local qs = {}
    self._fox:resize()
    self._fox:qlast(self._freq, qs)
    local res = {}
    local c = 0
    for _, line in ipairs(self._tDescr) do
        local from = line.from
        local tFroms = qFormData(from, qs)
        if #tFroms then
            local title = line.title
            local help = string.format("# HELP %s %s", title, line.help)
            c = c + 1
            res[c] = help
            local sType = string.format("# TYPE %s %s", title, line.type)
            c = c + 1
            res[c] = sType

            for _, tFrom in ipairs(tFroms) do
                local labels = system:deepcopy(tFrom.labels)
                if not labels then
                    labels = {}
                end
                labels.instance = self._instance
                for k, v in pairs(tFrom.values) do
                    labels[line.head] = k
                    c = c + 1
                    res[c] = self.pack_line(title, labels, v, tFrom.time)
                end
            end
        end
    end
    c = c + 1
    res[c] = ""
    local lines = pystring:join("\n", res)
    return lines
end

return Cexport
