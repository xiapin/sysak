---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/3/21 8:30 AM
---

require("common.class")
local CpluginManager = class("pluginManager")
local CguardSched = require("collector.guard.guardSched")
local Cplugin = require("collector.plugin")
local system = require("common.system")

function CpluginManager:_init_(procffi, proto_q, resYaml, tid, jperiod)
    local res = resYaml
    self:setProcSys(procffi, res.config)

    self._sig_cffi = procffi["cffi"]
    self._sig_cffi.ffi_plugin_init()

    self._plugins = {}
    self._names = {}
    self:setup(res, proto_q)
    self._guardSched = CguardSched.new(tid, self._plugins, self._names, jperiod)

    self._resYaml = resYaml   -- for add function
    self._proto_q = proto_q
end

function CpluginManager:_del_()
    self._sig_cffi.plugin_stop()
    for _, plugin in ipairs(self._plugins) do
        plugin = nil
    end
end

function CpluginManager:setup(resYaml, proto_q)
    local pluginFFI = require("collector.native.plugincffi")
    local plugins = resYaml.plugins

    for _, plugin in ipairs(plugins) do
        local so = plugin.so
        if so then
            table.insert(self._plugins, Cplugin.new(resYaml, pluginFFI, proto_q, so))
            table.insert(self._names, so)
        end
    end
end

function CpluginManager:add(name, loops)
    local pluginFFI = require("collector.native.plugincffi")
    if not system:valueIsIn(self._names, name) then
        table.insert(self._plugins, Cplugin.new(self._resYaml, pluginFFI, self._proto_q, name, loops))
        table.insert(self._names, name)
    end
end

function CpluginManager:setProcSys(procFFI, config)
    local proc = config["proc_path"] or "/"
    local sys = config["sys_path"] or "/"

    procFFI.cffi.ffi_set_unity_proc(procFFI.ffi.string(proc))
    procFFI.cffi.ffi_set_unity_sys(procFFI.ffi.string(sys))
end

function CpluginManager:proc(t, lines)
    self._guardSched:proc(t, lines)
end

return CpluginManager
