---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wrp.
--- DateTime: 2023/7/4 19:39
--- 进程级IO吞吐
--- 进程级等待IO延迟，/proc/<pid>/stat第42个字段
---

require("common.class")

local CkvProc = require("collector.kvProc")
local CvProc = require("collector.vproc")
local pystring = require("common.pystring")
local CobIO = class("obIO",CkvProc)


function CobIO:_init_(pid, proto, pffi, mnt, pFile)
    self._pid = pid
    CkvProc._init_(self, proto, pffi, mnt, pFile or "proc/" .. self._pid .. "/io", "obIO")
    self._stat = mnt .. "proc/" .. self._pid .. "/stat"
    self._protoTable = {
        line = "observe",
        ls = { { name = "pid", index = tostring(pid) }},
        vs = {}
    }
end

function CobIO:readKV(line)
    local data = self._ffi.new("var_kvs_t")
    assert(self._cffi.var_input_kvs(self._ffi.string(line), data) == 0)
    assert(data.no >= 1)

    local name = self._ffi.string(data.s)
    name = self:checkTitle(name)
    local value = tonumber(data.value[0])

    if name == "read_bytes" or name == "write_bytes" then
        local cell = {name=name, value=value}
        table.insert(self._protoTable["vs"], cell)
    end

end

function CobIO:proc(elapsed, lines)
    self._protoTable.vs = {}
    CvProc.proc(self)
    for line in io.lines(self.pFile) do
        self:readKV(line)
    end
    for line in io.lines(self._stat) do
        local subline = pystring:split(line," ",43)
        local IOdelay = subline[42]
        local cell = {name = "IOdelay",value = tonumber(IOdelay)}
        table.insert(self._protoTable["vs"], cell)

    end
    self:appendLine(self._protoTable)
    self:push(lines)
end

return CobIO