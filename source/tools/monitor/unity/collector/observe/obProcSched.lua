---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wrp.
--- DateTime: 2023/7/21 11:14
--- 进程级调度延迟
--- 进程级运行时间
--- 进程级cpu total占用率
--- 进程级cpu user占用率
--- 进程级cpu sys占用率
--- 进程自主切换
--- 进程非自主切换
---

require("common.class")
local CvProto = require("collector.vproto")
local CvProc = require("collector.vproc")

local pystring = require("common.pystring")

local CobProcSched = class("obScheDelay",CvProc)
--local pid = 1

function CobProcSched:_init_(pid, proto, pffi, mnt, pFile)
    self._pid = pid
    CvProc._init_(self, proto, pffi, mnt, pFile)
    self._protoTable = {
        line = "observe",
        ls = { { name = "pid", index = tostring(pid) } },
        vs = {}
    }
    self._fschedstat = mnt .. "proc/" .. self._pid .. "/schedstat"
    self._fstat = mnt .. "proc/" .. self._pid .. "/stat"
    self._fsched = mnt .. "proc/" .. self._pid .. "/sched"
end

function CobProcSched:proc(elapsed, lines)
    CvProto.proc(self)
    for line in io.lines(self._fschedstat) do
        local data = self._ffi.new("var_long_t")
        assert(self._cffi.var_input_long(self._ffi.string(line), data) == 0)
        assert(data.no == 3)
        local cell1 = {
            name = "delay",
            value = tonumber(data.value[1]),--value从0开始计数
        }
        table.insert(self._protoTable["vs"], cell1)
        local cell2 = {
            name = "time",
            value = tonumber(data.value[0]),--value从0开始计数
        }
        table.insert(self._protoTable["vs"], cell2)
    end

    for line in io.lines(self._fsched) do
        if string.find(line,":") then
            local subline = pystring:split(line,":",1)
            local _name = subline[1]
            local site = string.find(_name," ")
            _name = string.sub(_name,1,site-1)

            if _name == "nr_involuntary_switches" then
                local _value = subline[2]
                local i = pystring:rfind(_value,' ')
                _value = string.sub(_value,i+1,-1)
                local cell = {name=_name, value=tonumber(_value)}
                table.insert(self._protoTable["vs"], cell)
            elseif _name == "nr_voluntary_switches" then
                local _value = subline[2]
                local i = pystring:rfind(_value,' ')
                _value = string.sub(_value,i+1,-1)
                local cell = {name=_name, value=tonumber(_value)}
                table.insert(self._protoTable["vs"], cell)
            end

        end
    end

    for line in io.lines(self._fstat) do
        local subline = pystring:split(line," ",16)
        local user = tonumber(subline[14])
        local sys = tonumber(subline[15])
        local total = user + sys
        local cell1 = {name = "cpu_user",value = user}
        table.insert(self._protoTable["vs"], cell1)
        local cell2 = {name = "cpu_sys",value = sys}
        table.insert(self._protoTable["vs"], cell2)
        local cell3 = {name = "cpu_total",value = total}
        table.insert(self._protoTable["vs"], cell3)
    end
    self:appendLine(self._protoTable)
    self:push(lines)
end

return CobProcSched