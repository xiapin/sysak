---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wrp.
--- DateTime: 2023/7/28 22:12
---

require("common.class")

local CvProc = require("collector.vproc")
local system = require("common.system")
local pystring = require("common.pystring")
local unistd = require("posix.unistd")
local CobProcess = class("obProcess",CvProc)

function CobProcess:_init_(jperiod, labels, proto, pffi, mnt, pFile)
    self._jperiod = jperiod
    self._pid = labels["pid"]
    CvProc._init_(self, proto, pffi, mnt, pFile or "proc/"..self._pid)
    self._protoTable = {
        line = "observe",
        ls = {},
        vs = {}
    }
    for k, v in pairs(labels) do
        local cell = {name = k, index = tostring(v)}
        table.insert(self._protoTable["ls"], cell)
    end
    self._fschedstat = mnt .. "proc/" .. self._pid .. "/schedstat"
    self._fstat = mnt .. "proc/" .. self._pid .. "/stat"
    self._fsched = mnt .. "proc/" .. self._pid .. "/sched"
    self._fio = mnt .. "proc/" .. self._pid .. "/io"

    local err, errno
    self.nproc, err, errno = unistd.sysconf(84)
    if err then
        system:posixError("sysconf failed", err, errno)
    end

    for line in io.lines(self._fstat) do
        local subline = pystring:split(line," ",43)

        self.cpu_user_start = tonumber(subline[14])
        self.cpu_sys_start = tonumber(subline[15])
        self.IOwait_start = tonumber(subline[42])
        self.majflt_start = tonumber(subline[12])
        self.minflt_start = tonumber(subline[10])
    end

    for line in io.lines(self._fschedstat) do
        local data = self._ffi.new("var_long_t")
        assert(self._cffi.var_input_long(self._ffi.string(line), data) == 0)
        assert(data.no == 3)
        self.sched_time_start = tonumber(data.value[0])
        self.sched_delay_start = tonumber(data.value[1])
    end

    for line in io.lines(self._fsched) do
        if string.find(line,":") then
            local subline = pystring:split(line,":",1)
            local _name = subline[1]
            local site = string.find(_name," ")
            _name = string.sub(_name,1,site-1)

            if _name == "nr_involuntary_switches" then
                local _value = subline[2]
                local i = pystring:rfind(_value,' ')
                _value = string.sub(_value,i+1,-1)
                self.nr_inv_swi_start=tonumber(_value)

            elseif _name == "nr_voluntary_switches" then
                local _value = subline[2]
                local i = pystring:rfind(_value,' ')
                _value = string.sub(_value,i+1,-1)
                self.nr_vol_swi_start=tonumber(_value)

            end
        end
    end

    for line in io.lines(self._fio) do
        local data = self._ffi.new("var_kvs_t")
        assert(self._cffi.var_input_kvs(self._ffi.string(line), data) == 0)
        assert(data.no >= 1)

        local name = self._ffi.string(data.s)
        name = self:checkTitle(name)
        local value = tonumber(data.value[0])

        if name == "read_bytes" then
            self.read_bytes_start = value
        end
        if name == "write_bytes" then
            self.write_bytes_start = value
        end
    end

end

function CobProcess:checkTitle(title)
    local res = string.gsub(title, ":", "")
    res = string.gsub(res, "%)", "")
    res = string.gsub(res, "%(", "_")
    return res
end

function CobProcess:readKV(line,elapsed)
    local data = self._ffi.new("var_kvs_t")
    assert(self._cffi.var_input_kvs(self._ffi.string(line), data) == 0)
    assert(data.no >= 1)

    local name = self._ffi.string(data.s)
    name = self:checkTitle(name)
    local value = tonumber(data.value[0])

    if name == "read_bytes" then
        local cell = {name=name, value=(value-self.read_bytes_start)/elapsed}
        table.insert(self._protoTable["vs"], cell)
        self.read_bytes_start = value
    end
    if name == "write_bytes" then
        local cell = {name=name, value=(value-self.write_bytes_start)/elapsed}
        table.insert(self._protoTable["vs"], cell)
        self.write_bytes_start = value
    end
end

function CobProcess:getProcRunTime(starttime)
    -- 进程运行时间
    local ptime

    local fprocstat = io.open("/proc/stat")
    if fprocstat~=nil then
        for l in fprocstat:lines() do
            local ls = pystring:split(l, " ", 1)[2]
            local cpusum = 0
            local data = self._ffi.new("var_long_t")
            assert(self._cffi.var_input_long(self._ffi.string(ls), data) == 0)
            for i=0,data.no-1 do
                cpusum = cpusum + tonumber(data.value[i])
            end
            ptime = ((cpusum/self.nproc)-starttime)/self._jperiod

            break
        end
    end
    fprocstat:close()
    return ptime
end

function CobProcess:proc(elapsed, lines)
    self._protoTable.vs = {}
    self._protoTable.vs = {}
    CvProc.proc(self)

    for line in io.lines(self._fio) do
        self:readKV(line,elapsed)
    end

    for line in io.lines(self._fstat) do
        local subline = pystring:split(line," ",43)

        local IOwait = tonumber(subline[42])
        local cell = {name = "IOwait",value = 1e6*(IOwait-self.IOwait_start)/(elapsed*self._jperiod)}
        self.IOwait_start = IOwait
        table.insert(self._protoTable["vs"], cell)

        local maj = tonumber(subline[12])
        local min = tonumber(subline[10])
        local cell1 = {name = "majflt",value = maj-self.majflt_start}
        self.majflt_start = maj
        table.insert(self._protoTable["vs"], cell1)
        local cell2 = {name = "minflt",value = min-self.minflt_start}
        self.minflt_start = min
        table.insert(self._protoTable["vs"], cell2)

        local user = tonumber(subline[14])
        local sys = tonumber(subline[15])
        local total = user + sys
        local cell3 = {name = "cpu_user",value = 100*(user-self.cpu_user_start)/(elapsed*self._jperiod)}
        table.insert(self._protoTable["vs"], cell3)
        local cell4 = {name = "cpu_sys",value = 100*(sys-self.cpu_sys_start)/(elapsed*self._jperiod)}
        table.insert(self._protoTable["vs"], cell4)
        local cell5 = {name = "cpu_total",value = 100*(total-self.cpu_sys_start-self.cpu_user_start)/(elapsed*self._jperiod)}
        table.insert(self._protoTable["vs"], cell5)
        self.cpu_user_start = user
        self.cpu_sys_start = sys

        local vsize = subline[23]
        local rss = subline[24]
        local cell6 = {name = "vsize", value = tonumber(vsize)}
        table.insert(self._protoTable["vs"], cell6)
        local cell7 = {name = "rss", value = tonumber(rss)}
        table.insert(self._protoTable["vs"], cell7)

        local starttime = tonumber(subline[22])
        local procruntime = self:getProcRunTime(starttime)
        local cell8 = {name = "proc_run_time", value = procruntime}
        table.insert(self._protoTable["vs"], cell8)

    end

    for line in io.lines(self._fschedstat) do
        local data = self._ffi.new("var_long_t")
        assert(self._cffi.var_input_long(self._ffi.string(line), data) == 0)
        assert(data.no == 3)
        local cell1 = {
            name = "delay",
            value = (tonumber(data.value[1])-self.sched_delay_start)/(1e3*elapsed),
        }
        self.sched_delay_start = tonumber(data.value[1])
        table.insert(self._protoTable["vs"], cell1)
        local cell2 = {
            name = "time",
            value = (tonumber(data.value[0])-self.sched_time_start)/(1e3*elapsed),
        }
        self.sched_time_start = tonumber(data.value[0])
        table.insert(self._protoTable["vs"], cell2)
    end

    for line in io.lines(self._fsched) do
        if string.find(line,":") then
            local subline = pystring:split(line,":",1)
            local _name = subline[1]
            local site = string.find(_name," ")
            _name = string.sub(_name,1,site-1)

            if _name == "nr_involuntary_switches" then
                local _value = subline[2]
                local i = pystring:rfind(_value,' ')
                _value = string.sub(_value,i+1,-1)
                local cell = {name=_name, value=tonumber(_value)-self.nr_inv_swi_start}
                table.insert(self._protoTable["vs"], cell)
                self.nr_inv_swi_start = tonumber(_value)
            elseif _name == "nr_voluntary_switches" then
                local _value = subline[2]
                local i = pystring:rfind(_value,' ')
                _value = string.sub(_value,i+1,-1)
                local cell = {name=_name, value=tonumber(_value)-self.nr_vol_swi_start}
                table.insert(self._protoTable["vs"], cell)
                self.nr_vol_swi_start = tonumber(_value)
            end
        end
    end

    self:appendLine(self._protoTable)
    self:push(lines)
end

return CobProcess