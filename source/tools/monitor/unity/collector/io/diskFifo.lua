---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/4/12 15:51
---

require("common.class")
local system = require("common.system")
local Cfifo = require("common.fifo")

local CdiskFifo = class("diskFifo", Cfifo)

function CdiskFifo:_init_(maxLen)
    Cfifo._init_(self, maxLen)
    self._nr = 0
end

function CdiskFifo:push(v)
    Cfifo.push(self, v)
    self._nr = self._nr + 1
end

function CdiskFifo:iowait()
    local sum = 0
    local value
    local cells = {}
    local len = self:len()
    local c = 0

    if len < self:capacity() then
        return
    end

    for _, v in pairs(self.list) do
        c = c + 1
        value = v.iowait
        cells[c], sum = value, sum + value
    end
    return {max = math.max(unpack(cells)),
            min = math.min(unpack(cells)),
            nr = self._nr,
            avg = sum / len,
            last = value}
end

function CdiskFifo:values(disk, key)
    local c = 0
    local sum = 0
    local value
    local cells = {}
    local len = self:len()

    if len < self:capacity() then
        return
    end

    local d
    for _, v in pairs(self.list) do
        d = v[disk]
        if d then
            value = d[key]
            c = c + 1
            cells[c], sum = value, sum + value
        else   -- not full
            return
        end
    end
    return {max = math.max(unpack(cells)),
            min = math.min(unpack(cells)),
            nr = self._nr,
            avg = sum / len,
            last = value}
end

return CdiskFifo
