---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/4/12 00:01
---

require("common.class")
local exec = require("common.exec")
local pwait = require("posix.sys.wait")
local unistd = require("posix.unistd")
local pystring = require("common.pystring")
local system = require("common.system")

local CexecBase = class("execBase")
local interval = 5   --- poll for every 5 second

local function checkChild(ppid, pid)
    local path = "/proc/" .. pid .. "/status"
    local ret = false
    if unistd.access(path) then
        local f = io.open(path)

        for line in f:lines() do
            if pystring:startswith(line, "PPid:") then
                local s = pystring:split(line, ":", 1)
                if tonumber(pystring:strip(s[2])) == ppid then
                    ret = true
                end
                break
            end  -- end startswith
        end  -- end for

        f:close()
    end
    return ret
end

function CexecBase:_init_(cmd, args, seconds) -- seconds超时时间
    self.cmd = cmd
    self._cnt = 0
    self._loop = seconds / interval

    self._ppid = unistd.getpid()

    self._fIn, self._fOut = unistd.pipe()
    assert(self._fIn, "creat pipe failed.")

    self._pid = exec.run(cmd, args, self._fIn, self._fOut)
end

function CexecBase:addEvents(e)
    e:addEvent(self.cmd, self, interval, true, self._loop)
end

function CexecBase:work()
    local cnt = self._cnt
    local pid, stat, exit = pwait.wait(self._pid, pwait.WNOHANG)

    if exit then
        return -1, exit
    end
    if cnt >= self._loop then
        if pid == nil then
            error("wait failed " .. stat .. exit)
        end
        if not exit then -- process not exit
            print("force to kill " .. self._pid)
            if checkChild(self._ppid, self._ppid) then  -- confirm child process
                exec.kill(self._pid)
            end
        end
        return -1, nil  -- delete from task list.
    end
    self._cnt = cnt + 1
end

return CexecBase
