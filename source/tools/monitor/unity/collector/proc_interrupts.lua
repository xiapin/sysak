---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/3/8 11:07 AM
---

require("common.class")
local pystring = require("common.pystring")
local CvProc = require("collector.vproc")
local unistd = require("posix.unistd")

local Cinterrupts = class("interrupts", CvProc)

function Cinterrupts:_init_(proto, pffi, mnt, pFile)
    CvProc._init_(self, proto, pffi, mnt, pFile or "proc/interrupts")
    self._cpus = unistd.sysconf(84)
end

function Cinterrupts:proc(elapsed, lines)
    local c = 0
    CvProc.proc(self)
    local ints = {}
    for line in io.lines(self.pFile) do
        if c > 0 then
             ints[c] = pystring:split(pystring:strip(line))
        end
        c = c + 1
    end

    local per_irqs = {}
    for _, int in ipairs(ints) do
        local nums = #int
        if nums > self._cpus then
            local title = int[1]
            local head
            if string.match(title, "%d+:") then
                head = int[nums]
            else
                head = string.lower(string.sub(title, 1, -2))
            end

            for i=1, self._cpus do
                if not per_irqs[i] then
                    per_irqs[i] = {}
                end
                per_irqs[i][head] = tonumber(int[i + 1])
            end
        end
    end

    for i, irq in ipairs(per_irqs) do
        local ls = {
            name = "cpu", index = "cpu" .. (i - 1)
        }
        local c = 1
        local values = {}
        for k, v in pairs(irq) do
            values[c] = {
                name = k,
                value = v,
            }
            c = c + 1
        end
        self:appendLine(self:_packProto("interrupts", {ls}, values))
    end
    self:push(lines)
end

return Cinterrupts
