---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/16 11:57 PM
---

require("common.class")
local CvProc = require("collector.vproc")
local system = require("common.system")

local CprocNetdev = class("proc_netdev", CvProc)

function CprocNetdev:_init_(proto, pffi, mnt, pFile)
    CvProc._init_(self, proto, pffi, mnt, pFile or "proc/net/dev")
    self._lastData = {}
    self._lastIfNames = {}
end

function CprocNetdev:_netdevIndex()
    return {
        "if_ibytes", "if_ipackets", "if_ierrs", "if_idrop", "if_ififo", "if_iframe", "if_icompressed", "if_imulticast",
        "if_obytes", "if_opackets", "if_oerrs", "if_odrop", "if_ofifo", "if_ocolls", "if_ocarrier", "if_ocompressed"
    }
end

function CprocNetdev:_getNewValue(ifName, data)
    local now = {}
    local index = self:_netdevIndex()
    for i = 1, #index do
        now[i] = tonumber(data.value[i - 1])
    end
    self._lastData[ifName] = now
    self._lastIfNames[ifName] = 1
end

function CprocNetdev:_calcIf(ifName, data, res, elapsed)
    local now = {}
    local index = self:_netdevIndex()
    local protoTable = {
        line = "networks",
        ls = {{name = "network_name", index = ifName}},
        vs = {}
    }
    for i, index in ipairs(index) do
        local nowValue = tonumber(data.value[i -1])
        now[i] = nowValue
        local value = (nowValue - res[i]) / elapsed
        local cell = {
            name = index,
            value = value
        }
        protoTable.vs[i] = cell
    end

    self:appendLine(protoTable)
    self._lastData[ifName] = now
    self._lastIfNames[ifName] = 1
end

function CprocNetdev:_proc(line, elapsed)
    local data = self._ffi.new("var_kvs_t")
    assert(self._cffi.var_input_kvs(self._ffi.string(line), data) == 0)
    assert(data.no == 16)

    local ifName = string.gsub(self._ffi.string(data.s), ":", "")
    local last = self._lastData[ifName]

    if last then
        self:_calcIf(ifName, data, last, elapsed)
    else
        self:_getNewValue(ifName, data)
    end
end

function CprocNetdev:checkLastIfNames()
    for k, _ in pairs(self._lastData) do
        if not self._lastIfNames[k] then
            self._lastData[k] = nil
        end
    end
    self._lastIfNames = {}
end

function CprocNetdev:proc(elapsed, lines)
    CvProc.proc(self)
    local i = 1
    for line in io.lines(self.pFile) do
        if i > 2 then
            self:_proc(line, elapsed)
        end
        i = i + 1
    end
    self:checkLastIfNames()
    self:push(lines)
end

return CprocNetdev
