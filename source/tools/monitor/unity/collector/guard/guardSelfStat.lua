---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/3/23 8:15 AM
---

require("common.class")
local pystring = require("common.pystring")
local CvProc = require("collector.vproc")
-- refer to https://blog.csdn.net/longyuelang/article/details/114025476

local CguardSelfStat = class("guardSelfStat", CvProc)

local function readProc(path)
    local s
    for line in io.lines(path) do
        s = line
    end
    local ss = pystring:rsplit(s, ") ", 1)
    local rest = ss[2]
    local vs = pystring:split(rest, " ")
    local user, sys = tonumber(vs[12]), tonumber(vs[13])
    local vsize, rss = tonumber(vs[21]), tonumber(vs[22])
    return user, sys, vsize, rss
end

function CguardSelfStat:_init_(proto, pffi, mnt, resYaml, jperiod)
    CvProc._init_(self, proto, pffi, mnt, nil)
    self._path = "/proc/self/stat"

    self._lastUser, self._lastSys, _, _ = readProc(self._path)
    self._period = jperiod

    self._cpuLimit = nil
    self._memLimit = nil
    if resYaml.config.limit then
        if resYaml.config.limit.cpu then
            self._cpuLimit = resYaml.config.limit.cpu * jperiod / 100
        end
        if resYaml.config.limit.mem then
            self._memLimit = resYaml.config.limit.mem * 1024 * 1024
        end
    end
end

local function rssRssAnon()
    local anon = 0

    local f = assert(io.open("/proc/self/status"))
    for line in f:lines() do
        if pystring:startswith(line, "RssAnon:") then
            local res = pystring:split(line)
            anon = tonumber(res[2]) * 1024
        end
    end
    f:close()

    return anon
end

function CguardSelfStat:proc(elapsed, lines)
    CvProc.proc(self)

    local user, sys, vsize, rss = readProc(self._path)
    local _user, _sys = user - self._lastUser, sys - self._lastSys
    local cpus = _user + _sys

    self._lastUser, self._lastSys = user, sys
    if self._cpuLimit and cpus > self._cpuLimit * elapsed then
        print("last cpu usage overflow. user + sys jiffies: " .. cpus)
        os.exit(1)
    end

    local anon = pcall(rssRssAnon) or 0
    if self._memLimit and anon > self._memLimit then
        print("last mem usage overflow. rss bytes: " .. rss)
        os.exit(1)
    end
    local vs = {
        {
            name = "user",
            value = _user * 100 / (self._period * elapsed)
        },
        {
            name = "sys",
            value = _sys * 100 / (self._period * elapsed)
        },
        {
            name = "vsize",
            value = vsize
        },
        {
            name = "rss",
            value = rss * 4096
        },
        {
            name = "anon",
            value = anon,
        },
    }
    self:appendLine(self:_packProto("self_stat", nil, vs))
    self:push(lines)
end

return CguardSelfStat