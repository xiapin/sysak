---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/3/18 11:34 PM
---

local mod = {}
local ptime = require("posix.time")
local pstime = require("posix.sys.time")
local unistd = require("posix.unistd")
local system = require("common.system")

local function read_jiffies(path, procffi)
    local s
    for line in io.lines(path) do
        s = line
        break
    end
    local data = procffi.ffi.new("var_kvs_t")
    assert(procffi.cffi.var_input_kvs(procffi.ffi.string(s), data) == 0)
    assert(data.no == 10)

    local res = 0
    for i = 0, data.no - 1 do
        res = res + tonumber(data.value[i])
    end
    return res
end

local function get_native_us()
    local res, err, errno = pstime.gettimeofday()
    if res then
        return res.tv_sec * 1e6 + res.tv_usec
    else
        system:posixError("gettimeofday failed", err, errno)
    end
end

local function nproc()   -- get cpu numbers, exec nproc
    local r, err, errno = unistd.sysconf(84)
    if err then
        system:posixError("sysconf failed", err, errno)
    end
    return r
end

function mod.calc(mnt, procffi)
    local t = {tv_sec=0, tv_nsec=2e8}  -- 200ms
    local path = mnt .. "proc/stat"
    local r, err, errno

    local j1 = read_jiffies(path, procffi)
    local ns1 = get_native_us()
    r, err, errno = ptime.nanosleep(t)
    if err then
        system:posixError("nano sleep failed", err, errno)
    end

    local j2 = read_jiffies(path, procffi)
    local ns2 = get_native_us()
    ptime.nanosleep(t)
    if err then
        system:posixError("nano sleep failed", err, errno)
    end

    local j3 = read_jiffies(path, procffi)
    local ns3 = get_native_us()

    local delta1, delta2 = j2 - j1, j3 -j2
    local dts1, dts2 = ns2 - ns1, ns3 - ns2
    local comp = (delta1 / dts1) / ( delta2 / dts2 )

    if comp >= 1.1 or comp < 0.9 then
        error(string.format("calculate jiffies failed, delta1: %d, delta2: %d, dts1: %d, dts2: %d", delta1, delta2, dts1, dts2))
    end
    return (delta1 + delta2) * ( 1e6 / (dts1 + dts2)) / nproc()
end

return mod
