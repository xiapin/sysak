---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/3/18 11:34 PM
---

local mod = {}
local ptime = require("posix.time")
local unistd = require("posix.unistd")
local system = require("common.system")

local function read_jiffies(path, procffi)
    local s
    for line in io.lines(path) do
        s = line
        break
    end
    local data = procffi.ffi.new("var_kvs_t")
    assert(procffi.cffi.var_input_kvs(procffi.ffi.string(s), data) == 0)
    assert(data.no == 10)

    local res = 0
    for i = 0, data.no - 1 do
        res = res + tonumber(data.value[i])
    end
    return res
end

local function nproc()
    local r, err, errno = unistd.sysconf(84)
    if err then
        system:posixError("sysconf failed", err, errno)
    end
    return r
end

function mod.calc(mnt, procffi)
    local t = {tv_sec=0, tv_nsec=2e8}  -- 200ms
    local path = mnt .. "proc/stat"
    local r, err, errno

    local j1 = read_jiffies(path, procffi)
    r, err, errno = ptime.nanosleep(t)
    if err then
        system:posixError("nano sleep failed", err, errno)
    end

    local j2 = read_jiffies(path, procffi)
    ptime.nanosleep(t)
    if err then
        system:posixError("nano sleep failed", err, errno)
    end

    local j3 = read_jiffies(path, procffi)
    local delta1, delta2 = j2 - j1, j3 -j2
    local comp = delta1 / delta2

    if comp >= 1.1 or comp < 0.9 then
        errno("calculate jiffies failed.")
    end

    return (delta1 + delta2) * 2.5 / nproc()
end

return mod
