---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/4/9 23:39
---

require("common.class")
local pystring = require("common.pystring")
local system = require("common.system")
local bit = require("bit")

local Ciplib = class("iplib")

local function toIP(s)
    return tonumber(s, 16)
end

local function get_routes(mnt)
    local c = 0
    local routes = {}
    for line in io.lines(mnt .. "proc/net/route") do
        if c > 0 then
            local cells = pystring:split(line)
            local route = {
                ["if"] = cells[1],
                dst    = toIP(cells[2]),
                gw     = toIP(cells[3]),
                mask   = toIP(cells[8]),
                flag   = tonumber(cells[4]),
            }
            routes[c] = route
        end
        c = c + 1
    end

    table.sort(routes, function(a, b) return a.mask > b.mask end)
    return routes
end

function Ciplib:_init_(mnt)
    self._routes = get_routes(mnt)
end

function Ciplib:toInt(ip)
    local num = 0
    if ip and type(ip)=="string" then
        local o1, o2, o3, o4 = ip:match("(%d+)%.(%d+)%.(%d+)%.(%d+)")
        num = 2^24*o4 + 2^16*o3 + 2^8*o2 + o1
    end
    return num
end

function Ciplib:toIp(n)
    if n then
        n = tonumber(n)
        local n1 = math.floor(n / (2^24))
        local n2 = math.floor((n - n1*(2^24)) / (2^16))
        local n3 = math.floor((n - n1*(2^24) - n2*(2^16)) / (2^8))
        local n4 = math.floor((n - n1*(2^24) - n2*(2^16) - n3*(2^8)))
        return pystring:join(".", {n4, n3, n2, n1})
    end
    return "0.0.0.0"
end

function Ciplib:getRoute(ip)
    local num = self:toInt(ip)
    for _, route in pairs(self._routes) do
        local mask = route.mask
        if bit.band(mask, num) == bit.band(mask, route.dst) then
            return route
        end
    end
    return nil
end

function Ciplib:routeIp(ip)
    local route = self:getRoute(ip)
    if route then
        if bit.band(route.flag, 0x02) == 0x02 then  -- need gate
            return self:toIp(route.gw)
        else  -- direct
            return ip
        end
    end
    return nil
end

return Ciplib
