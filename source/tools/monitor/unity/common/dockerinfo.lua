---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuxinwnei.
--- DateTime: 2023/02/08 17:00 PM
---

dockerinfo = {}
local posix = require("posix")
local cjson = require("cjson")
local json = cjson.new()
local pystring = require("common.pystring")
local stat = require("posix.sys.stat")

function file_exists(file)
    local f=stat.lstat(file)
    if f ~= nil then
        return true
    else
        return false
    end
end

function dockerinfo:get_hostfs()
    local proc_fs="/mnt/host/proc/"
    local sys_fs="/mnt/host/sys/"
    local pods_fs="/mnt/host/var/lib/kubelet/pods/"
    local root_fs = "/mnt/host/"
    if file_exists(proc_fs) then
        return proc_fs, sys_fs, pods_fs, root_fs
    end
    proc_fs="/proc/"
    sys_fs="/sys/"
    pods_fs="/var/lib/kubelet/pods/"
    root_fs = "/"
    return proc_fs, sys_fs, pods_fs, root_fs
end

function get_runtimesock()
    local root_fs = ""
    _, _, _, root_fs = dockerinfo:get_hostfs()
    local runtime = "docker"
    local runtime_sock = root_fs .. "var/run/docker.sock"
    local sock={"var/run/docker.sock","run/containerd/containerd.sock", "var/run/dockershim.sock"}
    for _,runtimex in pairs(sock) do
        if file_exists(root_fs .. runtimex) then
            runtime_sock = root_fs .. runtimex
            if not string.find(runtime_sock,"docker.sock")  then
                runtime = "crictl"
            end
        end
    end
    return runtime,runtime_sock
end

function dockerinfo:get_inspect(did)
    local runtime,runtime_sock = get_runtimesock()
    if runtime == "docker" then
        return get_container_inspect(did) 
    else
        return get_crictl_inspect(did) 
    end
end

function dockerinfo:get_dockerid(pid)
    local proc_fs = dockerinfo:get_hostfs()
    local idstring = "unknow"
    if not file_exists(proc_fs .. pid .. "/cgroup") then return idstring end
    local cmd = "cat "  .. proc_fs .. pid .. "/cgroup 2>/dev/null | grep memory:"
    local pfile = io.popen(cmd,"r")
    local res = pfile:read("*a")
    pfile:close()

    if not string.find(res,"kubepods") and not string.find(res,"docker%-")  then return idstring end
    if string.find(res,"docker%-") then
        idstring = pystring:split(res,"docker-")[2]
    elseif string.find(res,"cri%-containerd%-") then
        idstring = pystring:split(res,"cri-containerd-")[2]
    else
        local tmp = pystring:split(res,"/",10)
        idstring = tmp[#tmp]
    end
    idstring = string.sub(idstring,0,8)
    return idstring
end

function get_container_inspect(did)
    local runtime, runtime_sock = get_runtimesock() 
    local cmd = "curl --silent -XGET --unix-socket " .. runtime_sock .. " http://localhost/containers/" .. did .. "/json 2>/dev/null "
    local f = io.popen(cmd,"r")
    local res = f:read("*a")
    f:close()
    return res
end

function get_crictl_inspect(did)
    local runtime, runtime_sock = get_runtimesock() 
    local cmd = runtime .. " -r " ..  runtime_sock .. " inspect " .. did .. " 2>/dev/null " 
    local f = io.popen(cmd,"r")
    local res = f:read("*a")
    f:close()
    return res
end

return dockerinfo
