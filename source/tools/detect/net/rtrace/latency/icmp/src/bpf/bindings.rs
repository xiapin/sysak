/* automatically generated by rust-bindgen 0.60.1 */

pub const MAX_STACK_DEPTH: u32 = 20;
pub type u8_ = ::std::os::raw::c_uchar;
pub type u16_ = ::std::os::raw::c_ushort;
pub type u32_ = ::std::os::raw::c_uint;
pub type u64_ = ::std::os::raw::c_ulonglong;
pub const DROP_KFREE_SKB: _bindgen_ty_1 = 0;
pub const DROP_TCP_DROP: _bindgen_ty_1 = 1;
pub const DROP_IPTABLES_DROP: _bindgen_ty_1 = 2;
pub const DROP_NFCONNTRACK_DROP: _bindgen_ty_1 = 3;
pub const LATENCY_EVENT: _bindgen_ty_1 = 4;
pub const CONNECT_LATENCY_EVENT: _bindgen_ty_1 = 5;
pub const EVENT_UNKNOWN: _bindgen_ty_1 = 6;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const ERR_OK: _bindgen_ty_2 = 0;
pub const ERR_PROTOCOL_NOT_DETERMINED: _bindgen_ty_2 = 1;
pub const ERR_PROTOCOL_NOT_SUPPORT: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addr_pair {
    pub saddr: u32_,
    pub daddr: u32_,
    pub sport: u16_,
    pub dport: u16_,
}
#[test]
fn bindgen_test_layout_addr_pair() {
    assert_eq!(
        ::std::mem::size_of::<addr_pair>(),
        12usize,
        concat!("Size of: ", stringify!(addr_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<addr_pair>(),
        4usize,
        concat!("Alignment of ", stringify!(addr_pair))
    );
    fn test_field_saddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<addr_pair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).saddr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(addr_pair),
                "::",
                stringify!(saddr)
            )
        );
    }
    test_field_saddr();
    fn test_field_daddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<addr_pair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).daddr) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(addr_pair),
                "::",
                stringify!(daddr)
            )
        );
    }
    test_field_daddr();
    fn test_field_sport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<addr_pair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sport) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(addr_pair),
                "::",
                stringify!(sport)
            )
        );
    }
    test_field_sport();
    fn test_field_dport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<addr_pair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dport) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(addr_pair),
                "::",
                stringify!(dport)
            )
        );
    }
    test_field_dport();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct event {
    pub type_: u8_,
    pub state: u8_,
    pub protocol: u8_,
    pub error: u8_,
    pub comm: [u8_; 16usize],
    pub stackid: u32_,
    pub pid: u32_,
    pub ts: u64_,
    pub ap: addr_pair,
    pub __bindgen_anon_1: event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union event__bindgen_ty_1 {
    pub __bindgen_anon_1: event__bindgen_ty_1__bindgen_ty_1,
    pub drop_params: event__bindgen_ty_1__bindgen_ty_2,
    pub abnormal: event__bindgen_ty_1__bindgen_ty_3,
    pub connectlatency: event__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_1__bindgen_ty_1 {
    pub pidtime_array_idx: u32_,
    pub socktime_array_idx: u32_,
    pub queue_ts: u64_,
    pub rcv_ts: u64_,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_pidtime_array_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pidtime_array_idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(pidtime_array_idx)
            )
        );
    }
    test_field_pidtime_array_idx();
    fn test_field_socktime_array_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).socktime_array_idx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(socktime_array_idx)
            )
        );
    }
    test_field_socktime_array_idx();
    fn test_field_queue_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).queue_ts) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(queue_ts)
            )
        );
    }
    test_field_queue_ts();
    fn test_field_rcv_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcv_ts) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(rcv_ts)
            )
        );
    }
    test_field_rcv_ts();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_1__bindgen_ty_2 {
    pub name: [u8_; 32usize],
    pub hook: u32_,
    pub sk_protocol: u8_,
    pub skap: addr_pair,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1__bindgen_ty_2>(),
        52usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_hook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(hook)
            )
        );
    }
    test_field_hook();
    fn test_field_sk_protocol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sk_protocol) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(sk_protocol)
            )
        );
    }
    test_field_sk_protocol();
    fn test_field_skap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skap) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(skap)
            )
        );
    }
    test_field_skap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_1__bindgen_ty_3 {
    pub i_ino: u32_,
    pub sk_ack_backlog: u32_,
    pub icsk_accept_queue: u32_,
    pub sk_max_ack_backlog: u32_,
    pub sk_wmem_queued: u32_,
    pub sndbuf: u32_,
    pub rmem_alloc: u32_,
    pub sk_rcvbuf: u32_,
    pub drop: u32_,
    pub retran: u32_,
    pub ooo: u32_,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1__bindgen_ty_3>(),
        44usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_i_ino() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i_ino) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(i_ino)
            )
        );
    }
    test_field_i_ino();
    fn test_field_sk_ack_backlog() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sk_ack_backlog) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(sk_ack_backlog)
            )
        );
    }
    test_field_sk_ack_backlog();
    fn test_field_icsk_accept_queue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).icsk_accept_queue) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(icsk_accept_queue)
            )
        );
    }
    test_field_icsk_accept_queue();
    fn test_field_sk_max_ack_backlog() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sk_max_ack_backlog) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(sk_max_ack_backlog)
            )
        );
    }
    test_field_sk_max_ack_backlog();
    fn test_field_sk_wmem_queued() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sk_wmem_queued) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(sk_wmem_queued)
            )
        );
    }
    test_field_sk_wmem_queued();
    fn test_field_sndbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sndbuf) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(sndbuf)
            )
        );
    }
    test_field_sndbuf();
    fn test_field_rmem_alloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rmem_alloc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(rmem_alloc)
            )
        );
    }
    test_field_rmem_alloc();
    fn test_field_sk_rcvbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sk_rcvbuf) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(sk_rcvbuf)
            )
        );
    }
    test_field_sk_rcvbuf();
    fn test_field_drop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drop) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(drop)
            )
        );
    }
    test_field_drop();
    fn test_field_retran() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).retran) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(retran)
            )
        );
    }
    test_field_retran();
    fn test_field_ooo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ooo) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(ooo)
            )
        );
    }
    test_field_ooo();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_1__bindgen_ty_4 {
    pub sock: u64_,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_1__bindgen_ty_4)
        )
    );
    fn test_field_sock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sock) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(sock)
            )
        );
    }
    test_field_sock();
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(event__bindgen_ty_1))
    );
    fn test_field_drop_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drop_params) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1),
                "::",
                stringify!(drop_params)
            )
        );
    }
    test_field_drop_params();
    fn test_field_abnormal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).abnormal) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1),
                "::",
                stringify!(abnormal)
            )
        );
    }
    test_field_abnormal();
    fn test_field_connectlatency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).connectlatency) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event__bindgen_ty_1),
                "::",
                stringify!(connectlatency)
            )
        );
    }
    test_field_connectlatency();
}
#[test]
fn bindgen_test_layout_event() {
    assert_eq!(
        ::std::mem::size_of::<event>(),
        112usize,
        concat!("Size of: ", stringify!(event))
    );
    assert_eq!(
        ::std::mem::align_of::<event>(),
        8usize,
        concat!("Alignment of ", stringify!(event))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_protocol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(protocol)
            )
        );
    }
    test_field_protocol();
    fn test_field_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(error)
            )
        );
    }
    test_field_error();
    fn test_field_comm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).comm) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(comm)
            )
        );
    }
    test_field_comm();
    fn test_field_stackid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stackid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(stackid)
            )
        );
    }
    test_field_stackid();
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(event),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(event), "::", stringify!(ts))
        );
    }
    test_field_ts();
    fn test_field_ap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap) as usize - ptr as usize
            },
            40usize,
            concat!("Offset of field: ", stringify!(event), "::", stringify!(ap))
        );
    }
    test_field_ap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct filter {
    pub pid: u32_,
    pub protocol: u16_,
    pub distribution: u8_,
    pub threshold: u64_,
    pub ap: addr_pair,
}
#[test]
fn bindgen_test_layout_filter() {
    assert_eq!(
        ::std::mem::size_of::<filter>(),
        32usize,
        concat!("Size of: ", stringify!(filter))
    );
    assert_eq!(
        ::std::mem::align_of::<filter>(),
        8usize,
        concat!("Alignment of ", stringify!(filter))
    );
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<filter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(filter),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_protocol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<filter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(filter),
                "::",
                stringify!(protocol)
            )
        );
    }
    test_field_protocol();
    fn test_field_distribution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<filter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).distribution) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(filter),
                "::",
                stringify!(distribution)
            )
        );
    }
    test_field_distribution();
    fn test_field_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<filter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(filter),
                "::",
                stringify!(threshold)
            )
        );
    }
    test_field_threshold();
    fn test_field_ap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<filter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(filter),
                "::",
                stringify!(ap)
            )
        );
    }
    test_field_ap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct onesecond {
    pub ts: u64_,
    pub clear: u32_,
    pub bitmap: [u32_; 32usize],
}
#[test]
fn bindgen_test_layout_onesecond() {
    assert_eq!(
        ::std::mem::size_of::<onesecond>(),
        144usize,
        concat!("Size of: ", stringify!(onesecond))
    );
    assert_eq!(
        ::std::mem::align_of::<onesecond>(),
        8usize,
        concat!("Alignment of ", stringify!(onesecond))
    );
    fn test_field_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<onesecond>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(onesecond),
                "::",
                stringify!(ts)
            )
        );
    }
    test_field_ts();
    fn test_field_clear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<onesecond>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(onesecond),
                "::",
                stringify!(clear)
            )
        );
    }
    test_field_clear();
    fn test_field_bitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<onesecond>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(onesecond),
                "::",
                stringify!(bitmap)
            )
        );
    }
    test_field_bitmap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seconds4_ring {
    pub os: [onesecond; 4usize],
    pub idx: u32_,
}
#[test]
fn bindgen_test_layout_seconds4_ring() {
    assert_eq!(
        ::std::mem::size_of::<seconds4_ring>(),
        584usize,
        concat!("Size of: ", stringify!(seconds4_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<seconds4_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(seconds4_ring))
    );
    fn test_field_os() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<seconds4_ring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).os) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(seconds4_ring),
                "::",
                stringify!(os)
            )
        );
    }
    test_field_os();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<seconds4_ring>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(seconds4_ring),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
}
pub const PING_SND: _bindgen_ty_3 = 0;
pub const PING_NET_DEV_QUEUE: _bindgen_ty_3 = 1;
pub const PING_NET_DEV_XMIT: _bindgen_ty_3 = 2;
pub const PING_DEV_RCV: _bindgen_ty_3 = 3;
pub const PING_NETIF_RCV: _bindgen_ty_3 = 4;
pub const PING_ICMP_RCV: _bindgen_ty_3 = 5;
pub const PING_RCV: _bindgen_ty_3 = 6;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp_event {
    pub type_: u8_,
    pub icmp_type: u8_,
    pub cpu: u16_,
    pub seq: u16_,
    pub id: u16_,
    pub ts: u64_,
    pub skb_ts: u64_,
    pub pid: u32_,
    pub comm: [u8_; 16usize],
}
#[test]
fn bindgen_test_layout_icmp_event() {
    assert_eq!(
        ::std::mem::size_of::<icmp_event>(),
        48usize,
        concat!("Size of: ", stringify!(icmp_event))
    );
    assert_eq!(
        ::std::mem::align_of::<icmp_event>(),
        8usize,
        concat!("Alignment of ", stringify!(icmp_event))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_icmp_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).icmp_type) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(icmp_type)
            )
        );
    }
    test_field_icmp_type();
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(seq)
            )
        );
    }
    test_field_seq();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(ts)
            )
        );
    }
    test_field_ts();
    fn test_field_skb_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skb_ts) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(skb_ts)
            )
        );
    }
    test_field_skb_ts();
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_comm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<icmp_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).comm) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(icmp_event),
                "::",
                stringify!(comm)
            )
        );
    }
    test_field_comm();
}
